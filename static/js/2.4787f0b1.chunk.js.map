{"version":3,"sources":["games/Wand.jsx"],"names":["Wand","props","handleOrientationEvent","bind","compassNeedsCalibration","event","alert","preventDefault","payload","x","accelerationIncludingGravity","y","z","this","logDeviceMotion","alpha","beta","gamma","compass","webkitCompassHeading","compass_accuracy","webkitCompassAccuracy","context","socket","emit","window","addEventListener","removeEventListener","class","Component","contextType","SocketContext"],"mappings":"6NAMMA,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAGDC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAC9B,EAAKC,wBAA0B,EAAKA,wBAAwBD,KAA7B,gBALhB,E,qFAQKE,GACpBC,MAAM,6EACND,EAAME,mB,wCAGQF,GACd,IAAIG,EAAU,CACVC,EAAGJ,EAAMK,6BAA6BD,EACtCE,EAAGN,EAAMK,6BAA6BC,EACtCC,EAAGP,EAAMK,6BAA6BE,GAG1CC,KAAKZ,MAAMa,gBAAgBN,K,6CAGRH,GACnB,IAAIG,EAAU,CACVO,MAAOV,EAAMU,MACbC,KAAMX,EAAMW,KACZC,MAAOZ,EAAMY,MACbC,QAASb,EAAMc,qBACfC,iBAAkBf,EAAMgB,uBAG5BR,KAAKS,QAAQC,OAAOC,KAAK,cAAehB,K,0CAKxCiB,OAAOC,iBAAiB,oBAAqBb,KAAKX,wBAAwB,GAI1EuB,OAAOC,iBAAiB,0BAA2Bb,KAAKT,yBAAyB,K,6CAIjFqB,OAAOE,oBAAoB,oBAAqBd,KAAKX,wBAAwB,GAC7EuB,OAAOE,oBAAoB,0BAA2Bd,KAAKT,yBAAyB,K,+BAKpF,OACI,oCACI,yBAAKwB,MAAM,+BACP,0BAAMA,MAAM,wBAAZ,QACA,kBAAC,IAAD,OAEJ,uD,GA1DGC,aAkEnB7B,EAAK8B,YAAcC,IAEJ/B","file":"static/js/2.4787f0b1.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nimport ConnectionStatus from '../components/ConnectionStatus'\n\nimport SocketContext from '../services/socket-context'\n\nclass Wand extends Component {\n    constructor(props) {\n        super(props);\n        \n        // this.handleMotionEvent = this.handleMotionEvent.bind(this);\n        this.handleOrientationEvent = this.handleOrientationEvent.bind(this);\n        this.compassNeedsCalibration = this.compassNeedsCalibration.bind(this);\n    }\n\n    compassNeedsCalibration(event) {\n        alert('Your compass needs calibrating! Wave your device in a figure-eight motion');\n        event.preventDefault();\n    }\n    \n    handleMotionEvent(event) {\n        var payload = {\n            x: event.accelerationIncludingGravity.x,\n            y: event.accelerationIncludingGravity.y,\n            z: event.accelerationIncludingGravity.z\n        };\n\n        this.props.logDeviceMotion(payload);\n    }\n\n    handleOrientationEvent(event) {\n        var payload = {\n            alpha: event.alpha,\n            beta: event.beta,\n            gamma: event.gamma,\n            compass: event.webkitCompassHeading,\n            compass_accuracy: event.webkitCompassAccuracy\n        };\n\n        this.context.socket.emit('orientation', payload);\n    }\n\n    componentDidMount () {\n\n        window.addEventListener(\"deviceorientation\", this.handleOrientationEvent, true);   \n\n        // Could use device motion for dead recking\n        // window.addEventListener(\"devicemotion\", this.handleMotionEvent, true);   \n        window.addEventListener(\"compassneedscalibration\", this.compassNeedsCalibration, true);\n    }\n\n    componentWillUnmount () {\n        window.removeEventListener(\"deviceorientation\", this.handleOrientationEvent, true);  \n        window.removeEventListener(\"compassneedscalibration\", this.compassNeedsCalibration, true);  \n        // window.removeEventListener(\"devicemotion\", this.handleMotionEvent, true);\n    }\n\n    render() {\n        return (\n            <>\n                <nav class=\"navbar navbar-light bg-dark\">\n                    <span class=\"navbar-brand mb-0 h1\">Wand</span>\n                    <ConnectionStatus />\n                </nav>\n                <div>\n                    Now playing, Wand\n                </div>\n            </>\n        );\n    } \n}\n\nWand.contextType = SocketContext;\n\nexport default Wand;"],"sourceRoot":""}