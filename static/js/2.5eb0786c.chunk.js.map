{"version":3,"sources":["games/Wand.jsx"],"names":["Wand","props","state","alpha","channel","handleOrientationEvent","bind","compassNeedsCalibration","setLight","event","alert","preventDefault","this","context","emit","payload","beta","gamma","compass","webkitCompassHeading","compass_accuracy","webkitCompassAccuracy","setState","window","addEventListener","removeEventListener","class","onClick","onChange","val","min","max","Component","contextType","SocketContext"],"mappings":"+OASMA,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,OAAQ,EACRC,SAAU,GAId,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAC9B,EAAKC,wBAA0B,EAAKA,wBAAwBD,KAA7B,gBAC/B,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAXD,E,qFAcKG,GACpBC,MAAM,6EACND,EAAME,mB,iCAINC,KAAKC,QAAQC,KAAK,QAAS,CACvBX,MAAOS,KAAKV,MAAMC,MAClBC,QAASQ,KAAKV,MAAME,Y,6CAcLK,GACnB,IAAIM,EAAU,CACVZ,MAAOM,EAAMN,MACba,KAAMP,EAAMO,KACZC,MAAOR,EAAMQ,MACbC,QAAST,EAAMU,qBACfC,iBAAkBX,EAAMY,uBAG5BT,KAAKU,SAAS,CAACnB,MAAOY,EAAQZ,QAE9BS,KAAKC,QAAQC,KAAK,WAAYC,K,0CAK9BQ,OAAOC,iBAAiB,oBAAqBZ,KAAKP,wBAAwB,GAI1EkB,OAAOC,iBAAiB,0BAA2BZ,KAAKL,yBAAyB,K,6CAIjFgB,OAAOE,oBAAoB,oBAAqBb,KAAKP,wBAAwB,GAC7EkB,OAAOE,oBAAoB,0BAA2Bb,KAAKL,yBAAyB,K,+BAI9E,IAAD,OACL,OACI,oCACI,yBAAKmB,MAAM,+BACP,0BAAMA,MAAM,wBAAZ,QACA,kBAAC,IAAD,OAEJ,6BACI,kBAAC,IAAD,CAAQC,QAASf,KAAKJ,UAAtB,aACA,kBAAC,IAAD,CAAQmB,QAAS,kBAAM,EAAKd,QAAQC,KAAK,kBAAzC,gBACA,kBAAC,EAAD,CAAcc,SAAU,SAACC,GAAD,OAAS,EAAKP,SAAS,CAAClB,QAASyB,KAAOC,IAAK,EAAGC,IAAK,Y,GA5E9EC,aAmFnBhC,EAAKiC,YAAcC,IAEJlC","file":"static/js/2.5eb0786c.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nimport ConnectionStatus from '../components/ConnectionStatus'\n\nimport * as NumericInput from \"react-numeric-input\"\nimport { Button } from 'react-bootstrap'\n\nimport SocketContext from '../services/socket-context'\n\nclass Wand extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            alpha: -1,\n            channel: -1\n        }\n        \n        // this.handleMotionEvent = this.handleMotionEvent.bind(this);\n        this.handleOrientationEvent = this.handleOrientationEvent.bind(this);\n        this.compassNeedsCalibration = this.compassNeedsCalibration.bind(this);\n        this.setLight = this.setLight.bind(this);\n    }\n\n    compassNeedsCalibration(event) {\n        alert('Your compass needs calibrating! Wave your device in a figure-eight motion');\n        event.preventDefault();\n    }\n\n    setLight() {\n        this.context.emit('light', {\n            alpha: this.state.alpha, \n            channel: this.state.channel\n        });\n    }\n    \n    // handleMotionEvent(event) {\n    //     var payload = {\n    //         x: event.accelerationIncludingGravity.x,\n    //         y: event.accelerationIncludingGravity.y,\n    //         z: event.accelerationIncludingGravity.z\n    //     };\n\n    //     this.props.logDeviceMotion(payload);\n    // }\n\n    handleOrientationEvent(event) {\n        var payload = {\n            alpha: event.alpha,\n            beta: event.beta,\n            gamma: event.gamma,\n            compass: event.webkitCompassHeading,\n            compass_accuracy: event.webkitCompassAccuracy\n        };\n\n        this.setState({alpha: payload.alpha});\n\n        this.context.emit('odometry', payload);\n    }\n\n    componentDidMount () {\n\n        window.addEventListener(\"deviceorientation\", this.handleOrientationEvent, true);   \n\n        // Could use device motion for dead recking\n        // window.addEventListener(\"devicemotion\", this.handleMotionEvent, true);   \n        window.addEventListener(\"compassneedscalibration\", this.compassNeedsCalibration, true);\n    }\n\n    componentWillUnmount () {\n        window.removeEventListener(\"deviceorientation\", this.handleOrientationEvent, true);  \n        window.removeEventListener(\"compassneedscalibration\", this.compassNeedsCalibration, true);  \n        // window.removeEventListener(\"devicemotion\", this.handleMotionEvent, true);\n    }\n\n    render() {\n        return (\n            <>\n                <nav class=\"navbar navbar-light bg-dark\">\n                    <span class=\"navbar-brand mb-0 h1\">Wand</span>\n                    <ConnectionStatus />\n                </nav>\n                <div>\n                    <Button onClick={this.setLight}>Set Light</Button>\n                    <Button onClick={() => this.context.emit('clear-lights')}>Clear Lights</Button>\n                    <NumericInput onChange={(val) => this.setState({channel: val})} min={0} max={512}/>\n                </div>\n            </>\n        );\n    } \n}\n\nWand.contextType = SocketContext;\n\nexport default Wand;"],"sourceRoot":""}